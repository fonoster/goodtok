{
  "name": "root",
  "private": true,
  "author": "Pedro Sanders <psanders@fonoster.com>",
  "license": "MIT",
  "description": "A CX tool for better shopping experience ðŸ¤™",
  "main": "dist/index",
  "types": "dist/index",
  "workspaces": [
    "mods/*"
  ],
  "scripts": {
    "start:services": "docker-compose -f compose.yaml -f compose.dev.yaml up mailhog postgres peerjs -d",
    "start:apiserver": "cross-env SECURITY_PATH_TO_KEYS=./.keys LOGS_LEVEL=verbose NODE_ENV=dev nodemon mods/apiserver/src/index.ts",
    "start:frontoffice": "NODE_ENV=dev cd mods/frontoffice && npm start",
    "start:widget": "NODE_ENV=dev cd mods/widget && npm start",
    "start:storybook": "storybook dev -p 6006 -c .storybook",
    "start:docs": "cd docs && npm start",
    "build": "lerna run build",
    "build:storybook": "storybook build",
    "prebuild": "npx prisma generate --schema ./mods/apiserver/schema.prisma",
    "clean": "lerna run clean && rimraf dist coverage .nyc_output .keys",
    "test": "cross-env NODE_ENV=dev nyc --reporter=lcov mocha mods/**/test/*unit.test.ts --exit",
    "test:integration": "cross-env NODE_ENV=dev nyc --reporter=lcov mocha mods/**/test/*int.test.ts --exit",
    "db:up": "docker compose -f compose.dev.yaml up postgres adminer -d",
    "db:down": "docker compose -f compose.dev.yaml down",
    "db:migrate": "npx prisma migrate dev --schema ./mods/apiserver/schema.prisma --name init --preview-feature",
    "generate:readme": "lerna run generate:readme",
    "publish": "lerna publish --yes --no-git-reset --dist-tag next $(./.scripts/next-release.sh) --message \"chore(release): publish %s [skip ci]\"",
    "publish:prerelease": "lerna publish prerelease --dist-tag next",
    "publish:frompackages": "lerna publish from-package",
    "lint": "eslint mods --ext .ts --fix",
    "format": "prettier --write mods/**/src",
    "prepare": "husky install",
    "bump:version": "rimraf mods/**/.lerna-changed-buster-* && lerna exec -- touch .lerna-changed-buster-$RANDOM"
  },
  "dependencies": {
    "@prisma/client": "^5.4.1",
    "express": "^4.18.1"
  },
  "devDependencies": {
    "@commitlint/cli": "^17.7.1",
    "@commitlint/config-conventional": "^17.7.0",
    "@storybook/addon-essentials": "^7.5.2",
    "@storybook/addon-interactions": "^7.5.2",
    "@storybook/addon-links": "^7.5.2",
    "@storybook/addon-onboarding": "^1.0.8",
    "@storybook/blocks": "^7.5.2",
    "@storybook/react": "^7.5.2",
    "@storybook/react-vite": "^7.5.2",
    "@storybook/testing-library": "^0.2.2",
    "@types/chai": "^4.3.1",
    "@types/chai-as-promised": "^7.1.7",
    "@types/express": "^4.17.13",
    "@types/mocha": "^9.1.1",
    "@types/node": "^20.8.2",
    "@types/sinon": "^10.0.11",
    "@types/sinon-chai": "^3.2.8",
    "@typescript-eslint/eslint-plugin": "^5.26.0",
    "@typescript-eslint/parser": "^5.62.0",
    "chai": "^4.3.4",
    "chai-as-promised": "^7.1.1",
    "cross-env": "^7.0.3",
    "eslint": "^7.23.0",
    "eslint-config-google": "^0.14.0",
    "eslint-config-prettier": "^8.1.0",
    "eslint-plugin-no-loops": "^0.3.0",
    "eslint-plugin-notice": "^0.9.10",
    "eslint-plugin-prettier": "^3.3.1",
    "eslint-plugin-storybook": "^0.6.15",
    "esm": "^3.2.25",
    "http-server": "^14.1.1",
    "husky": "^8.0.1",
    "jsdoc-to-markdown": "^7.1.1",
    "jsonwebtoken": "^9.0.2",
    "lerna": "^7.4.2",
    "mocha": "^10.0.0",
    "nodemon": "^3.0.1",
    "nyc": "^15.1.0",
    "prettier": "^2.6.2",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "sinon": "^9.0.2",
    "sinon-chai": "^3.5.0",
    "storybook": "^7.5.2",
    "ts-loader": "^9.4.2",
    "ts-node": "^10.7.0",
    "typescript": "^5.2.2",
    "webpack": "^5.88.0",
    "webpack-cli": "^5.1.4"
  },
  "keywords": [
    "Goodtok",
    "VoIP",
    "WebRTC",
    "Fonoster",
    "PeerJS",
    "Web Phone",
    "Phone",
    "Contact Center"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/psanders/goodtok.git"
  },
  "bugs": {
    "url": "https://github.com/psanders/goodtok/issues"
  },
  "nodemonConfig": {
    "watch": [
      "./mods/**"
    ],
    "ext": "ts",
    "exec": "ts-node",
    "ignore": "**/*.d.ts"
  },
  "directories": {
    "src": "src",
    "test": "test"
  },
  "files": [
    "dist"
  ]
}
