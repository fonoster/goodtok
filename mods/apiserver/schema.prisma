generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WorkspaceMemberStatus {
  PENDING
  ACTIVE

  @@map("workspace_member_status")
}

enum WorkspaceMemberRole {
  OWNER
  ADMIN
  MEMBER

  @@map("workspace_member_role")
}

enum QueueEntryStatus {
  ONLINE
  OFFLINE
  DEQUEUED
  IN_PROGRESS

  @@map("queue_entry_status")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(255)
  password  String   @map("password_hash") /// @encrypted
  name      String   @db.VarChar(60)
  avatar    String?  @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(3)

  // Relations
  ownedWorkspaces Workspace[] // Workspaces owned by the user
  memberships     WorkspaceMember[] // Workspaces the user is a member of

  // Indexes and maps
  @@index([email], type: Hash)
  @@map("users")
}

// The hours of operations field for the workspace holds the following structure:
// 
// {
//   Sunday: { from: "09:00", to: "17:00" },
//   Monday: { from: "09:00", to: "17:00" },
//   ...
//   Saturday: { } // Denotes that the workspace is closed on Saturday
// }
model Workspace {
  id               String          @id @default(uuid())
  name             String          @db.VarChar(60)
  hoursOfOperation Json            @map("hours_of_operation") @default("{}")
  enabled          Boolean         @default(true)
  calendarUrl      String          @map("calendar_url") @db.VarChar(255)
  timezone         String

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(3)

  // Relations
  owner          User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String
  members        WorkspaceMember[]
  queue          QueueEntry[]
  shopifyAccount ShopifyAccount?

  // Indexes and maps
  @@index([name], type: Hash)
  @@map("workspaces")
}

model WorkspaceMember {
  id     String                @id @default(uuid())
  status WorkspaceMemberStatus
  role   WorkspaceMemberRole   @default(MEMBER)

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt   DateTime  @default(now()) @map("updated_at") @db.Timestamptz(3)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

model QueueEntry {
  id           Int              @id @default(autoincrement())
  customerId   String
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt    DateTime         @default(now()) @map("updated_at") @db.Timestamptz(3)
  registeredAt DateTime         @default(now()) @map("registered_at") @db.Timestamptz(3)
  status       QueueEntryStatus
  metadata     Json             @default("{}")

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String

  // Indexes and maps
  @@index([workspaceId], type: Hash)
  @@index([customerId], type: Hash)
  @@map("queue_entries")
}

model ShopifyAccount {
  id          String @id @default(uuid())
  accessToken String @map("access_token") @db.VarChar(255) /// @encrypted
  storeDomain String @map("store_domain") @db.VarChar(255)

  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @unique

  // Timestamps (if needed)
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @db.Timestamptz(3)

  @@map("shopify_accounts")
}
